package com.hanlyjiang.learnandroid.document.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hanlyjiang.learnandroid.document.db.CaseFile;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CASE_FILE".
*/
public class CaseFileDao extends AbstractDao<CaseFile, Long> {

    public static final String TABLENAME = "CASE_FILE";

    /**
     * Properties of entity CaseFile.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FileId = new Property(1, String.class, "fileId", false, "FILE_ID");
        public final static Property FileName = new Property(2, String.class, "fileName", false, "FILE_NAME");
        public final static Property FileUrl = new Property(3, String.class, "fileUrl", false, "FILE_URL");
        public final static Property FileLocalPath = new Property(4, String.class, "fileLocalPath", false, "FILE_LOCAL_PATH");
        public final static Property DownloadDate = new Property(5, java.util.Date.class, "downloadDate", false, "DOWNLOAD_DATE");
        public final static Property UpdateDate = new Property(6, java.util.Date.class, "updateDate", false, "UPDATE_DATE");
        public final static Property Md5 = new Property(7, String.class, "md5", false, "MD5");
        public final static Property DownloadState = new Property(8, String.class, "downloadState", false, "DOWNLOAD_STATE");
    };


    public CaseFileDao(DaoConfig config) {
        super(config);
    }
    
    public CaseFileDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CASE_FILE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"FILE_ID\" TEXT NOT NULL ," + // 1: fileId
                "\"FILE_NAME\" TEXT NOT NULL ," + // 2: fileName
                "\"FILE_URL\" TEXT," + // 3: fileUrl
                "\"FILE_LOCAL_PATH\" TEXT," + // 4: fileLocalPath
                "\"DOWNLOAD_DATE\" INTEGER," + // 5: downloadDate
                "\"UPDATE_DATE\" INTEGER," + // 6: updateDate
                "\"MD5\" TEXT," + // 7: md5
                "\"DOWNLOAD_STATE\" TEXT);"); // 8: downloadState
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CASE_FILE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CaseFile entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFileId());
        stmt.bindString(3, entity.getFileName());
 
        String fileUrl = entity.getFileUrl();
        if (fileUrl != null) {
            stmt.bindString(4, fileUrl);
        }
 
        String fileLocalPath = entity.getFileLocalPath();
        if (fileLocalPath != null) {
            stmt.bindString(5, fileLocalPath);
        }
 
        java.util.Date downloadDate = entity.getDownloadDate();
        if (downloadDate != null) {
            stmt.bindLong(6, downloadDate.getTime());
        }
 
        java.util.Date updateDate = entity.getUpdateDate();
        if (updateDate != null) {
            stmt.bindLong(7, updateDate.getTime());
        }
 
        String md5 = entity.getMd5();
        if (md5 != null) {
            stmt.bindString(8, md5);
        }
 
        String downloadState = entity.getDownloadState();
        if (downloadState != null) {
            stmt.bindString(9, downloadState);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CaseFile readEntity(Cursor cursor, int offset) {
        CaseFile entity = new CaseFile( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // fileId
            cursor.getString(offset + 2), // fileName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // fileUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fileLocalPath
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // downloadDate
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // updateDate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // md5
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // downloadState
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CaseFile entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFileId(cursor.getString(offset + 1));
        entity.setFileName(cursor.getString(offset + 2));
        entity.setFileUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFileLocalPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDownloadDate(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setUpdateDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setMd5(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDownloadState(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CaseFile entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CaseFile entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
